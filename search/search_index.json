{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OAuth 2 Authorization server","text":""},{"location":"#what-is-oauth-2","title":"What is OAuth 2?","text":"<p>OAuth means <code>Open Authorization</code> &amp; OAuth 2 is an  <code>Authorization Framework</code></p>"},{"location":"#what-is-authentication-and-authorization","title":"What is Authentication and Authorization?","text":"<p><code>Authentication</code> - \"Who you are?\", is the process of ascertaining that somebody really is who they claim to be.</p> <p><code>Authorization</code> refers to rules that determine who is allowed to do what. E.g. Thirumal may be authorized to create and delete databases, while Jesicca is only authorized to read.</p>"},{"location":"#database","title":"Database","text":""},{"location":"#there-are-many-ways-of-authentication-few-of-which-are-worth-discussing-here","title":"There are many ways of authentication, few of which are worth discussing here:","text":"<ol> <li> <p><code>Knowledge-based authentication</code>: The username password combination is a type of knowledge-based authentication. The idea is to verify the user based on the knowledge of the user for example answer to security questions, passwords, something which only the user should know.</p> </li> <li> <p><code>Possession based authentication</code>: This type of authentication is based on verifying something which a user possesses. For example, when an application sends you One Time Passwords (OTPs) or a text message.</p> </li> </ol> <p>Modern authentication practices use a combination of both types, also known as <code>Multi-Factor authentication</code>.</p>"},{"location":"#prerequisites","title":"Prerequisites:","text":"<ol> <li>Eureka - Optional</li> <li>PostgreSQL </li> </ol>"},{"location":"#how-to-set-up","title":"How to set up","text":"<ol> <li>Without Eureka. Comment <code>eureka-client</code> in <code>pom.xml</code>.</li> <li></li> </ol>"},{"location":"#sql","title":"SQL","text":"<pre><code>INSERT INTO public.oauth2_authorization_consent(\n    registered_client_id, principal_name, authorities)\n    VALUES ('Thirumal', 'admin', 'user');\n</code></pre>"},{"location":"#database-model","title":"Database model","text":""},{"location":"#faq","title":"FAQ","text":""},{"location":"#acquire-authorization-code","title":"Acquire Authorization Code","text":"<ol> <li> <p>Login using URL: http://localhost:9000</p> </li> <li> <p>To get Authorization Token: http://localhost:9000/oauth2/authorize?response_type=code&amp;client_id=client1&amp;redirect_uri=http://127.0.0.1:8000/authorized&amp;scope=read</p> </li> </ol>"},{"location":"Access%20Token/","title":"Access Token","text":"<p>Access token is short lived, used to access the resource.</p>"},{"location":"Access%20Token/#contents-of-a-token","title":"Contents of a token","text":"<ul> <li> <p>identifier</p> </li> <li> <p>JWT/ID Token - can contain user, authorities, roles, scope,.. details and token details</p> </li> <li> <p>Opaque Token - identifier - the token will not have user / role / authorities details</p> </li> </ul>"},{"location":"Access%20Token/#how-create-access-token","title":"How create access token.","text":"<ul> <li> <p>Using grant</p> </li> <li> <p>Using refresh token</p> </li> </ul>"},{"location":"Access%20Token/#create-access-token-using-grant","title":"Create Access token using Grant","text":"<p><code>GET</code> method to get access token using refresh token...</p> <p><pre><code>curl --location 'localhost:9000/oauth2/token' \\\n--header 'Authorization: Basic MTpUaGlydW1hbA==' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'code=Saq4y3tOX2egzOdcZr7bB1xUhtSAb9ZtZXP8xw6hhQukOTinFIY0beufHu303tD_nNdgslmZXY0DXgs4gZUMgkPvs0t1P__ajdwYscZIEDZBcFpvooxIReFawD3OKXJJ' \\\n--data-urlencode 'redirect_uri=http://127.0.0.1:8000/authorized'\n</code></pre> </p>"},{"location":"Access%20Token/#create-access-token-using-refresh-token","title":"Create Access Token using Refresh token","text":"<p><code>POST</code> method to get access token using refresh token...</p> <p><pre><code>curl --location 'http://localhost:9000/oauth2/token' \\\n--header 'Authorization: Bearer eyJraWQiOiI1NzIzMTllYS1jNWFmLTRkM2EtYmIwNy03MjhhOGM0NTFiNmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI3MWVmNTViZS1hODNiLTQ1M2MtYmNkYS1mZWViYzg2M2JlNTUiLCJhdWQiOiIxIiwibmJmIjoxNjc5NzY0NDkwLCJzY29wZSI6WyJyZWFkIl0sInJvbGVzIjpbIlVTRVIiXSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5MDAwIiwiQ3JlYXRvciI6IlRoaXJ1bWFsIiwiZXhwIjoxNjc5NzY3NDkwLCJpYXQiOjE2Nzk3NjQ0OTB9.1W1ZuuCPy46ZVvQWEoVVKHQs4hdO_-1PyUe16fQk3KJeJs8Zu3KlFlKkr7AzpJR11_TuZ14atLexeKI7cZFA_dfBjP_pQq4j0RC7S8rXGaetXTjG--PykV2x4TMnj_bvJkp_6ZVMGbKkXT6CbysqzLRbY8e6ZZVkDhMKAa4avswdB4MgPq0DHqqjh21Gre8_1pm7Op25PGySGP1xfHnGXgY1fdBFCjGcHL8TJyQgrEl11qZo4CrvrDeevmCPLfMwYUla2GJIocWO9oCTAyVgmU4H2jMaCWyRrtOWuhP9683NTefPuprm73_blqWKvcEgULxijT_6HVQKJwPzSgYFPg' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=refresh_token' \\\n--data-urlencode 'client_id=1' \\\n--data-urlencode 'client_secret=Thirumal' \\\n--data-urlencode 'refresh_token=cXFPqw-YyV7P5Jp_3YAxzBt7iomaN_ki34-yKIC4NjbF_ReFqn8fMf2tYbsWfzBDt4IGACkOxRZUWrjQF1VvWjkF3SrevpGaVvF4ALkw72LMgzLKxmAtjCsa6pUQDjvn'\n</code></pre> </p>"},{"location":"Customize%20Access%20Token%20Content/","title":"Customize Access Token Content","text":""},{"location":"Customize%20Access%20Token%20Content/#customize-access-token-content","title":"Customize access token Content","text":"<p>Note: Add only the required information to the access token.</p> <ul> <li>User Information</li> <li>Roles</li> </ul> <p>Add the following bean and the claims you would like to add. Check AuthorizationServerConfig.java in the project</p> <p><code>@Bean OAuth2TokenCustomizer&lt;JwtEncodingContext&gt; jwtCustomizer() {     return context -&gt; {         if (context.getTokenType() == OAuth2TokenType.ACCESS_TOKEN) {             Authentication principal = context.getPrincipal();             Set&lt;String&gt; authorities = principal.getAuthorities().stream()                     .map(GrantedAuthority::getAuthority)                     .collect(Collectors.toSet());             context.getClaims().claims(c -&gt; c.put(\"Creator\", \"Thirumal\"));             context.getClaims().claim(\"roles\", authorities);         }     }; }</code></p>"},{"location":"Definitions/","title":"Definitions","text":""},{"location":"Definitions/#roles","title":"Roles","text":"Roles Description Resource Owner User Authorization Server Server that issues token to the client application Client , , ,  Resource Server"},{"location":"Definitions/#client-types","title":"Client Types","text":"<p>There are two types </p> <ul> <li> <p>Confidentail Client - Can keep <code>Client Secret</code> safe</p> </li> <li> <p>Secure app running on Server</p> </li> <li> <p>Public Client - Cannot keep <code>Client Id &amp; Secret</code> safe</p> </li> <li> <p>Native Apps on user device</p> </li> <li>Single Page browser based app</li> </ul>"},{"location":"Definitions/#access-token","title":"Access Token","text":"<ul> <li> <p>Identity token </p> </li> <li> <p>Self contained token</p> </li> </ul>"},{"location":"Definitions/#grant-type","title":"Grant Type","text":"<ul> <li>Way an application gets an access token</li> </ul> Client Type Grant Type Server Side Web App Authorization Code Password Grant Server Script with no UI Client Credentials - JavaScript Single Page App PKCE Enhanced Auth code Implicit Flow / Password Grant Mobile Native App PKCE Enhanced Auth code Implicit Flow / Password Grant Device Device Code Password Grant <ul> <li>PKCE - Proof of Key for Code Exchange</li> </ul> <p>Request for OAuth code</p> <pre><code>http://localhost:9000/auth\n\n?client_id=\"\"\n\n&amp;response_type=code\n\n&amp;scope=openid\n\n&amp;redirect_uri=\n\n&amp;state=\n\n&amp;code_challenge=\n\n&amp;code_challenge_method=S256\n</code></pre> <p>Exchange OAuth code for access token</p> <p>Grant types are     <code>authorization_code, client_credentials</code> based on the type of clients</p> <pre><code>http://localhost:9000/token\n\n--header 'Content-Type:\u00a0application/x-www-form-urlencoded'\n\n--data-urlencode 'grant_type=authorization_code'\n\n--data-urlencode 'client_id=resource-server-1'\n\n--data-urlencode 'code='\n\n--data-urlencode 'redirect_uri='\n\n--data-urlencode 'code_verifier='\n</code></pre> <p>Access Tokens</p> <pre><code>{\n    \"access_token\": \"\",\n    \"expires_in\"  : \"\",\n    \"token_type\"  : \"\",\n    \"scope\"       : \"\"\n}\n</code></pre>"},{"location":"Definitions/#refresh-token","title":"Refresh Token","text":"<p>Refresh token grant type is used to exchange a refresh token for an access token</p>"},{"location":"Definitions/#scope","title":"Scope","text":"<p>Limit user access on resource server</p>"},{"location":"EndPoints/","title":"All End points","text":"<p>Invoke http://localhost:9000/.well-known/openid-configuration</p> <pre><code>{\n    \"issuer\": \"http://localhost:9000\",\n    \"authorization_endpoint\": \"http://localhost:9000/oauth2/authorize\",\n    \"token_endpoint\": \"http://localhost:9000/oauth2/token\",\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"jwks_uri\": \"http://localhost:9000/oauth2/jwks\",\n    \"userinfo_endpoint\": \"http://localhost:9000/userinfo\",\n    \"response_types_supported\": [\n        \"code\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"client_credentials\",\n        \"refresh_token\"\n    ],\n    \"revocation_endpoint\": \"http://localhost:9000/oauth2/revoke\",\n    \"revocation_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"introspection_endpoint\": \"http://localhost:9000/oauth2/introspect\",\n    \"introspection_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"subject_types_supported\": [\n        \"public\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"RS256\"\n    ],\n    \"scopes_supported\": [\n        \"openid\"\n    ]\n}\n</code></pre> <p></p>"},{"location":"FQA/","title":"FAQ","text":""},{"location":"FQA/#modify-add-user-info-to-the-access-token","title":"Modify / add user info to the Access Token","text":""},{"location":"FQA/#howwhere-to-getfind-all-the-well-known-end-points","title":"How/Where to get/find all the well known end points","text":""},{"location":"Introspect/","title":"Introspect","text":"<p>Introspect is used to check the status (is active or not) of token.</p> <pre><code>curl --location 'http://localhost:9000/oauth2/introspect' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=eyJraWQiOiJkMTE0YzI5Yy04ZDUwLTQxZWMtODJmNy02MmU0MWU4ZmVjMDMiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIyYzM0NjUzNy1hMWU0LTQ4NjktODVlMC01YWFiNzNhN2E1ZTkiLCJhdWQiOiIxIiwibmJmIjoxNjc4NTUzMDYwLCJzY29wZSI6WyJyZWFkIl0sInJvbGVzIjpbIlJPTEVfQURNSU4iXSwiaXNzIjoiaHR0cDovLzMuNi4yMzkuMTk4OjkwMDAiLCJleHAiOjE2Nzg1NTYwNjAsImlhdCI6MTY3ODU1MzA2MH0.RuNKVbXHYTH1QstF-XKfKbRyIN9jH1gMqX-kmAnUyPLtG1aM2IYm_dN6Bh8lVjTGcQAR4AgC6mUHQEo0SVfuuTG09-KGfJ18jTRPC1jaKJaK2rpCR6N_XRcTDK8WUtb5IPRZdxSM1cUri1VGZlMponZPLt927_E-tRlQljTfEZD1-yfnX652pvETSifZzo75VtljhUaxuJIdLc5BoB3UCS6hdp_drXyBCpEFX5hx9xKaPJ3f9fP9MnzLFKV9p0o5gNzBzB_VKr_IGmArlDVt5AxLRuHFQmBASew2pA9ifTNsCM_WD9RtKWATkd4nGfFY89Emz1G7nw3-rpBELM5P-w' \\\n--data-urlencode 'client_id=1' \\\n--data-urlencode 'client_secret=Thirumal'\n</code></pre> <p></p>"},{"location":"Refresh%20Token/","title":"Refresh Token","text":"<p>Refresh token grant type is used to exchange a refresh token for an access token</p>"},{"location":"Refresh%20Token/#refresh-token-that-never-expires","title":"Refresh Token that never expires","text":"<p>If the <code>refresh_expires_in</code> is set to <code>0</code>, then the refresh token will not expire</p> <pre><code>{\n    \"access_token\": \"\",\n    \"expires_in\"  : \"\",\n    \"refresh_token\": \"\",\n    \"refresh_expires_in\": \"\",\n    \"token_type\"  : \"\",\n    \"session_state\": \"\",\n    \"scope\"       : \"\"\n}\n</code></pre>"},{"location":"Refresh%20Token/#how-to-request-the-refresh-token-that-never-expires","title":"How to request the refresh token that never expires","text":"<p>Set <code>scope</code> value <code>profile_offline_access</code> on token access</p>"},{"location":"Refresh%20Token/#get-access-token-using-refresh-token","title":"Get Access Token using Refresh Token","text":"<pre><code>curl --location 'http://localhost:9000/oauth2/token' \\\n--header 'Authorization: Bearer eyJraWQiOiI1NzIzMTllYS1jNWFmLTRkM2EtYmIwNy03MjhhOGM0NTFiNmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI3MWVmNTViZS1hODNiLTQ1M2MtYmNkYS1mZWViYzg2M2JlNTUiLCJhdWQiOiIxIiwibmJmIjoxNjc5NzY0NDkwLCJzY29wZSI6WyJyZWFkIl0sInJvbGVzIjpbIlVTRVIiXSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5MDAwIiwiQ3JlYXRvciI6IlRoaXJ1bWFsIiwiZXhwIjoxNjc5NzY3NDkwLCJpYXQiOjE2Nzk3NjQ0OTB9.1W1ZuuCPy46ZVvQWEoVVKHQs4hdO_-1PyUe16fQk3KJeJs8Zu3KlFlKkr7AzpJR11_TuZ14atLexeKI7cZFA_dfBjP_pQq4j0RC7S8rXGaetXTjG--PykV2x4TMnj_bvJkp_6ZVMGbKkXT6CbysqzLRbY8e6ZZVkDhMKAa4avswdB4MgPq0DHqqjh21Gre8_1pm7Op25PGySGP1xfHnGXgY1fdBFCjGcHL8TJyQgrEl11qZo4CrvrDeevmCPLfMwYUla2GJIocWO9oCTAyVgmU4H2jMaCWyRrtOWuhP9683NTefPuprm73_blqWKvcEgULxijT_6HVQKJwPzSgYFPg' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=refresh_token' \\\n--data-urlencode 'client_id=1' \\\n--data-urlencode 'client_secret=Thirumal' \\\n--data-urlencode 'refresh_token=PaQ0EXNaBwGfmuAjk86uYBQlnVEk7B__n9bPLQ2Pz_T8p3IWDSa3oIV76OpuI3f3NFzxH2H6hUJ8-1gAj9VerIk72I9YAhg8QxI53eMMhk72UiiCGUfXVwBAR93GZMLF'\n</code></pre>"},{"location":"Registered%20Client/","title":"Registered Client","text":"<p><code>ClientId</code> and <code>ClientSecret</code> are credentials that the OAuth Client application will use to authenticate with the server. </p> <p>There are two types of OAuth Clients: </p> <ul> <li>Public</li> <li>Confidential</li> </ul> <p>By providing value for ClientSecret, we make this OAuth client a confidential client. </p> <p>If the OAuth Client application is a Javascript application, then no need to configure the Client Secret value. Use PKCE instead.</p> <p>POST</p> <pre><code>{\n  \"clientName\": \"client1\",\n  \"clientAuthenticationMethods\": [\"client_secret_basic\", \"client_secret_post\"],\n  \"authorizationGrantTypes\": [\"refresh_token\"],\n  \"redirectUris\": [\"http://127.0.0.1:8000/authorized\",\"http://127.0.0.1:8000/login/oauth2/code/users-client-oidc\"],\n  \"scopes\": [\"openid\",\"profile\"],\n  \"clientSettings\": {\n    \"settings\": {\n      \"additionalProp1\": {},\n      \"additionalProp2\": {},\n      \"additionalProp3\": {}\n    },\n    \"requireProofKey\": true,\n    \"jwkSetUrl\": \"string\",\n    \"requireAuthorizationConsent\": true,\n    \"tokenEndpointAuthenticationSigningAlgorithm\": {\n      \"name\": \"string\"\n    }\n  },\n  \"tokenSettings\": null\n}\n</code></pre>"},{"location":"Resource%20Server/","title":"Resource Server","text":"<ul> <li> <p>Need to set access token validation URL</p> </li> <li> <p>To access <code>Principal</code>, use <code>JWT</code></p> </li> </ul>"},{"location":"Revoke%20Token/","title":"Revoke Tokens","text":"<p>We can revoke both access &amp; refresh token</p> <pre><code>curl --location 'http://localhost:9000/oauth2/revoke' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'token=eyJraWQiOiJkMThhMWNmMC04OThhLTRkYWYtYWNiNS05OWQyNDNkNDllZWMiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwYWVkODQ5NC05NjA1LTQ3YTgtYThiMS1lM2VmMTYyYzFkYzgiLCJhdWQiOiIxIiwibmJmIjoxNjc4NTEwNjQzLCJzY29wZSI6WyJyZWFkIl0sInJvbGVzIjpbIlJPTEVfQURNSU4iXSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5MDAwIiwiZXhwIjoxNjc4NTEzNjQzLCJpYXQiOjE2Nzg1MTA2NDN9.F1BwBvDUH1PQHG81zcivYSXwD7AfECpg1HRT3StvR7s2flIIVcc4ep3SPHtSm4iS3BHAoYSbNt4jSsHa4zKa6L8o5_fqL8DPbWq8SO4t2rY0rZdW1kt6Nlaw8blc1zAKjFL2o0tCahCbUozrtIlCepxGw6u6805rdTHDFRuVNSGdiIhO0eRTNwV7f0WHe6bC2qvvHqzMiRertk4eZe2R0x5QNzuHR9gwPUsCXsfp7qpEufJDiGsmuVd-JWw8hyZBzttg_xCeUr0KtIiUg_Zxo-clG_sgaZgE4XJtNvpNfnZV60vogfWEFa5300gWWHQAuWJT7JXpzqYfUO4I5rtsdg' \\\n--data-urlencode 'client_id=1' \\\n--data-urlencode 'client_secret=Thirumal'\n</code></pre> <p></p>"},{"location":"Role%20details%20in%20Access%20Token/","title":"Role details in Access Token","text":"<p>Add Roles in claims</p> <pre><code>@Bean\nOAuth2TokenCustomizer&lt;JwtEncodingContext&gt; jwtCustomizer(CustomClaims claims) {\n    return context -&gt; {\n        if (context.getTokenType() == OAuth2TokenType.ACCESS_TOKEN) {\n            Authentication principal = context.getPrincipal();\n            Set&lt;String&gt; authorities = principal.getAuthorities().stream()\n                    .map(GrantedAuthority::getAuthority)\n                    .collect(Collectors.toSet());\n            context.getClaims().claims(c -&gt; c.putAll(claims.getClaims(principal)));\n            context.getClaims().claim(\"roles\", authorities);\n        }\n    };\n}\n</code></pre>"},{"location":"Set%20up/","title":"Set Up","text":""},{"location":"Set%20up/#with-eureka","title":"With Eureka","text":"<ol> <li>Clone Eureka and start.</li> </ol>"},{"location":"Set%20up/#without-eureka","title":"Without Eureka","text":"<ol> <li>Remove <code>spring-cloud-starter-netflix-eureka-client</code> dependency from <code>pom.xml</code></li> </ol>"},{"location":"Set%20up/#database","title":"Database","text":"<ol> <li> <p>Install PostgreSQL</p> </li> <li> <p>Execute Authorization DDL to create database and tables required</p> </li> </ol>"},{"location":"Troubleshoot/","title":"Troubleshoot","text":""},{"location":"Troubleshoot/#access-token-issued-using-refresh-token-is-not-working","title":"Access Token issued using Refresh token is not working","text":"<p>Problem:-</p> <pre><code>org.springframework.security.authentication.AuthenticationServiceException: An error occurred while attempting to decode the Jwt: Malformed Jwk set\n    at org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider.getJwt(JwtAuthenticationProvider.java:103) ~[spring-security-oauth2-resource-server-6.0.1.jar:6.0.1]\n</code></pre> <p>Solution:-</p> <p>Make sure, you are using public IP address, or same IP address on all of your resource and authorization server.</p>"},{"location":"_navbar/","title":"navbar","text":"<ul> <li> <p>DEFINITIONS</p> <ul> <li>Registered Client</li> <li>Resource Server</li> <li>Endpoints</li> </ul> </li> <li> <p>SETUP</p> </li> <li> <p>DATABASE</p> </li> <li> <p>TOKEN</p> <ul> <li>Access Token</li> <li>Refresh Token</li> <li>Revoke Token</li> <li>Introspect</li> <li>JWKS</li> </ul> </li> <li> <p>FAQ</p> </li> <li> <p>Troubleshoot</p> </li> </ul>"},{"location":"_sidebar/","title":"sidebar","text":"<ul> <li> <p>DEFINITIONS</p> <ul> <li>Registered Client</li> <li>Resource Server</li> <li>Endpoints</li> </ul> </li> <li> <p>SETUP</p> </li> <li> <p>DATABASE</p> </li> <li> <p>TOKEN</p> <ul> <li>Access Token<ul> <li>Customize Access Token</li> <li>Roles in Acess Token</li> </ul> </li> <li>Refresh Token</li> <li>Revoke Token</li> <li>Introspect</li> <li>JWKS</li> </ul> </li> <li> <p>FAQ</p> </li> <li> <p>Troubleshoot</p> </li> </ul>"},{"location":"database/","title":"Database","text":""},{"location":"database/#data-model","title":"Data Model","text":""},{"location":"database/#data-dictionary","title":"Data dictionary","text":"<p>Data Dictionary</p>"},{"location":"database/#sql","title":"SQL","text":"<pre><code>-- Database generated with pgModeler (PostgreSQL Database Modeler).\n-- pgModeler version: 1.0.1\n-- PostgreSQL version: 15.0\n-- Project Site: pgmodeler.io\n-- Model Author: ---\n\n-- Database creation must be performed outside a multi lined SQL file. \n-- These commands were put in this file only as a convenience.\n-- \n-- object: authorization1 | type: DATABASE --\n-- DROP DATABASE IF EXISTS authorization1;\nCREATE DATABASE authorization1;\n-- ddl-end --\nCOMMENT ON DATABASE authorization1 IS E'Created Thirumal';\n-- ddl-end --\n\n\n-- object: lookup | type: SCHEMA --\n-- DROP SCHEMA IF EXISTS lookup CASCADE;\nCREATE SCHEMA lookup;\n-- ddl-end --\nALTER SCHEMA lookup OWNER TO postgres;\n-- ddl-end --\n\nSET search_path TO pg_catalog,public,lookup;\n-- ddl-end --\n\n-- object: \"uuid-ossp\" | type: EXTENSION --\n-- DROP EXTENSION IF EXISTS \"uuid-ossp\" CASCADE;\nCREATE EXTENSION \"uuid-ossp\"\nWITH SCHEMA public;\n-- ddl-end --\n\n-- object: public.oauth2_authorization | type: TABLE --\n-- DROP TABLE IF EXISTS public.oauth2_authorization CASCADE;\nCREATE TABLE public.oauth2_authorization (\nid varchar(100) NOT NULL,\nregistered_client_id varchar(100) NOT NULL,\nprincipal_name varchar(200) NOT NULL,\nauthorization_grant_type varchar(100) NOT NULL,\nauthorized_scopes varchar(1000),\nattributes text,\nstate varchar(500),\nauthorization_code_value text,\nauthorization_code_issued_at timestamptz,\nauthorization_code_expires_at timestamptz,\nauthorization_code_metadata text,\naccess_token_value text,\naccess_token_issued_at timestamptz,\naccess_token_expires_at timestamptz,\naccess_token_metadata text,\naccess_token_type varchar(100),\naccess_token_scopes varchar(1000),\noidc_id_token_value text,\noidc_id_token_issued_at timestamptz,\noidc_id_token_expires_at timestamptz,\noidc_id_token_metadata text,\nrefresh_token_value text,\nrefresh_token_issued_at timestamptz,\nrefresh_token_expires_at timestamptz,\nrefresh_token_metadata text,\nCONSTRAINT oauth2_authorization_pk PRIMARY KEY (id,registered_client_id,principal_name)\n);\n-- ddl-end --\nALTER TABLE public.oauth2_authorization OWNER TO postgres;\n-- ddl-end --\n\n-- object: public.oauth2_authorization_consent | type: TABLE --\n-- DROP TABLE IF EXISTS public.oauth2_authorization_consent CASCADE;\nCREATE TABLE public.oauth2_authorization_consent (\nregistered_client_id varchar(100) NOT NULL,\nprincipal_name varchar(200) NOT NULL,\nauthorities varchar(1000) NOT NULL,\nCONSTRAINT oauth2_authorization_consent_pk PRIMARY KEY (registered_client_id,principal_name)\n);\n-- ddl-end --\nALTER TABLE public.oauth2_authorization_consent OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO public.oauth2_authorization_consent (registered_client_id, principal_name, authorities) VALUES (E'Thirumal', E'admin', E'SCOPE_read,user');\n-- ddl-end --\n\n-- object: oauth2_authorization_consent_fk | type: CONSTRAINT --\n-- ALTER TABLE public.oauth2_authorization DROP CONSTRAINT IF EXISTS oauth2_authorization_consent_fk CASCADE;\nALTER TABLE public.oauth2_authorization ADD CONSTRAINT oauth2_authorization_consent_fk FOREIGN KEY (registered_client_id,principal_name)\nREFERENCES public.oauth2_authorization_consent (registered_client_id,principal_name) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: public.oauth2_registered_client | type: TABLE --\n-- DROP TABLE IF EXISTS public.oauth2_registered_client CASCADE;\nCREATE TABLE public.oauth2_registered_client (\nid varchar(100) NOT NULL,\nclient_id varchar(100) NOT NULL,\nclient_id_issued_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\nclient_secret varchar(200),\nclient_secret_expires_at timestamp,\nclient_name varchar(200) NOT NULL,\nclient_authentication_methods varchar(1000) NOT NULL,\nauthorization_grant_types varchar(1000) NOT NULL,\nredirect_uris varchar,\nscopes varchar(1000) NOT NULL,\nclient_settings varchar(2000) NOT NULL,\ntoken_settings varchar(2000) NOT NULL,\nCONSTRAINT oauth2_registered_client_pk PRIMARY KEY (id)\n);\n-- ddl-end --\nALTER TABLE public.oauth2_registered_client OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO public.oauth2_registered_client (id, client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name, client_authentication_methods, authorization_grant_types, redirect_uris, scopes, client_settings, token_settings) VALUES (E'Thirumal', E'1', DEFAULT, E'$2a$10$M0D7JM8IErxNfdNCRccHgOR3ImXzr/nV5NQO1kRZZCIaaDM.YhA5e', DEFAULT, E'Thirumal', E'client_secret_basic,client_secret_post', E'refresh_token,client_credentials,authorization_code', E'http://127.0.0.1:8000/authorized,http://127.0.0.1:8000/login/oauth2/code/users-client-oidc', E'read,openid,profile', E'{\"@class\":\"java.util.Collections$UnmodifiableMap\",\"settings.client.require-proof-key\":false,\"settings.client.require-authorization-consent\":true}', E'{\"@class\":\"java.util.Collections$UnmodifiableMap\",\"settings.token.reuse-refresh-tokens\":true,\"settings.token.id-token-signature-algorithm\":[\"org.springframework.security.oauth2.jose.jws.SignatureAlgorithm\",\"RS256\"],\"settings.token.access-token-time-to-live\":[\"java.time.Duration\",3000.000000000],\"settings.token.access-token-format\":{\"@class\":\"org.springframework.security.oauth2.server.authorization.settings.OAuth2TokenFormat\",\"value\":\"self-contained\"},\"settings.token.refresh-token-time-to-live\":[\"java.time.Duration\",3600.000000000],\"settings.token.authorization-code-time-to-live\":[\"java.time.Duration\",300.000000000]}');\n-- ddl-end --\nINSERT INTO public.oauth2_registered_client (id, client_id, client_id_issued_at, client_secret, client_secret_expires_at, client_name, client_authentication_methods, authorization_grant_types, redirect_uris, scopes, client_settings, token_settings) VALUES (E'E-Auction', E'2', DEFAULT, E'$2a$10$M0D7JM8IErxNfdNCRccHgOR3ImXzr/nV5NQO1kRZZCIaaDM.YhA5e', DEFAULT, E'E-Auction', E'client_secret_basic,client_secret_post', E'refresh_token,client_credentials,authorization_code', E'http://127.0.0.1:8000/authorized,http://127.0.0.1:8000/login/oauth2/code/users-client-oidc', E'read,openid,profile', E'{\"@class\":\"java.util.Collections$UnmodifiableMap\",\"settings.client.require-proof-key\":false,\"settings.client.require-authorization-consent\":true}', E'{\"@class\":\"java.util.Collections$UnmodifiableMap\",\"settings.token.reuse-refresh-tokens\":true,\"settings.token.id-token-signature-algorithm\":[\"org.springframework.security.oauth2.jose.jws.SignatureAlgorithm\",\"RS256\"],\"settings.token.access-token-time-to-live\":[\"java.time.Duration\",3000.000000000],\"settings.token.access-token-format\":{\"@class\":\"org.springframework.security.oauth2.server.authorization.settings.OAuth2TokenFormat\",\"value\":\"self-contained\"},\"settings.token.refresh-token-time-to-live\":[\"java.time.Duration\",3600.000000000],\"settings.token.authorization-code-time-to-live\":[\"java.time.Duration\",300.000000000]}');\n-- ddl-end --\n\n-- object: public.login_user_name_login_user_name_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.login_user_name_login_user_name_id_seq CASCADE;\nCREATE SEQUENCE public.login_user_name_login_user_name_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: public.contact_contact_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.contact_contact_id_seq CASCADE;\nCREATE SEQUENCE public.contact_contact_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: lookup.contact_cd_contact_cd_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS lookup.contact_cd_contact_cd_seq CASCADE;\nCREATE SEQUENCE lookup.contact_cd_contact_cd_seq\nINCREMENT BY 1\nMINVALUE -32768\nMAXVALUE 32767\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: lookup.contact_locale | type: TABLE --\n-- DROP TABLE IF EXISTS lookup.contact_locale CASCADE;\nCREATE TABLE lookup.contact_locale (\ncontact_cd smallint NOT NULL,\nlocale_cd integer NOT NULL,\ndescription varchar(100) NOT NULL,\nstart_time timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,\nend_time timestamptz NOT NULL DEFAULT 'infinity'::timestamp,\nrow_created_on timestamptz NOT NULL DEFAULT current_timestamp,\nrow_created_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_updated_on timestamptz NOT NULL DEFAULT current_timestamp,\nrow_updated_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_update_info text\n\n);\n-- ddl-end --\nALTER TABLE lookup.contact_locale OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO lookup.contact_locale (contact_cd, locale_cd, description, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'1', E'1', E'E-Mail', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.contact_locale (contact_cd, locale_cd, description, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'2', E'1', E'Phone Number', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\n\n-- object: public.login_user_login_user_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.login_user_login_user_id_seq CASCADE;\nCREATE SEQUENCE public.login_user_login_user_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: public.contact | type: TABLE --\n-- DROP TABLE IF EXISTS public.contact CASCADE;\nCREATE TABLE public.contact (\ncontact_id bigint NOT NULL DEFAULT nextval('public.contact_contact_id_seq'::regclass),\nlogin_user_id bigint NOT NULL,\ncontact_cd smallint NOT NULL,\nlogin_id varchar(200) NOT NULL,\nverified_on timestamptz,\nend_time timestamp NOT NULL DEFAULT 'infinity'::timestamp,\nrow_created_on timestamptz NOT NULL DEFAULT current_timestamp,\nCONSTRAINT contact_pk PRIMARY KEY (contact_id)\n);\n-- ddl-end --\nALTER TABLE public.contact OWNER TO postgres;\n-- ddl-end --\n\n-- object: public.login_user | type: TABLE --\n-- DROP TABLE IF EXISTS public.login_user CASCADE;\nCREATE TABLE public.login_user (\nlogin_user_id bigint NOT NULL DEFAULT nextval('public.login_user_login_user_id_seq'::regclass),\nlogin_uuid uuid NOT NULL DEFAULT uuid_generate_v4(),\ndate_of_birth timestamptz,\nindividual boolean NOT NULL DEFAULT true,\nrow_created_on timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,\nCONSTRAINT user_pk PRIMARY KEY (login_user_id)\n);\n-- ddl-end --\nALTER TABLE public.login_user OWNER TO postgres;\n-- ddl-end --\n\n-- object: public.login_user_name | type: TABLE --\n-- DROP TABLE IF EXISTS public.login_user_name CASCADE;\nCREATE TABLE public.login_user_name (\nlogin_user_name_id bigint NOT NULL DEFAULT nextval('public.login_user_name_login_user_name_id_seq'::regclass),\nlogin_user_id bigint NOT NULL,\nfirst_name varchar(200) NOT NULL,\nmiddle_name varchar(100),\nlast_name varchar(200),\nrow_created_on timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,\nCONSTRAINT user_name_pk PRIMARY KEY (login_user_name_id)\n);\n-- ddl-end --\nALTER TABLE public.login_user_name OWNER TO postgres;\n-- ddl-end --\n\n-- object: lookup.contact_cd | type: TABLE --\n-- DROP TABLE IF EXISTS lookup.contact_cd CASCADE;\nCREATE TABLE lookup.contact_cd (\ncontact_cd smallint NOT NULL DEFAULT nextval('lookup.contact_cd_contact_cd_seq'::regclass),\ncode varchar(50) NOT NULL,\nregex varchar(500),\nstart_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\nend_time timestamp NOT NULL DEFAULT 'infinity'::TIMESTAMP,\nrow_created_on timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,\nrow_created_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_updated_on timestamptz NOT NULL DEFAULT 'infinity'::timestamp,\nrow_updated_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_update_info text,\nCONSTRAINT contact_cd_pk PRIMARY KEY (contact_cd)\n);\n-- ddl-end --\nCOMMENT ON COLUMN lookup.contact_cd.regex IS E'REGEX to Validate';\n-- ddl-end --\nALTER TABLE lookup.contact_cd OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO lookup.contact_cd (contact_cd, code, regex, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'1', E'E-Mail', E'^[a-zA-Z0-9_!#$%&amp;''*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.contact_cd (contact_cd, code, regex, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'2', E'Phone Number', E'^\\+[1-9]{1}[0-9]{3,14}$', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\n\n-- object: lookup.locale_cd_locale_cd_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS lookup.locale_cd_locale_cd_seq CASCADE;\nCREATE SEQUENCE lookup.locale_cd_locale_cd_seq\nINCREMENT BY 1\nMINVALUE -2147483648\nMAXVALUE 2147483647\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: lookup.locale_cd | type: TABLE --\n-- DROP TABLE IF EXISTS lookup.locale_cd CASCADE;\nCREATE TABLE lookup.locale_cd (\nlocale_cd integer NOT NULL DEFAULT nextval('lookup.locale_cd_locale_cd_seq'::regclass),\ncode varchar(100) NOT NULL,\nstart_time timestamptz NOT NULL DEFAULT current_timestamp,\nend_time timestamptz NOT NULL DEFAULT 'infinity'::timestamp,\nrow_created_by varchar(100) NOT NULL DEFAULT 'Thirumal',\nrow_updated_by varchar(100) NOT NULL DEFAULT 'Thirumal',\nrow_created_on timestamptz NOT NULL DEFAULT current_timestamp,\nrow_updated_on timestamptz NOT NULL DEFAULT current_timestamp,\nrow_update_info text,\nCONSTRAINT locale_cd_pk PRIMARY KEY (locale_cd)\n);\n-- ddl-end --\nALTER TABLE lookup.locale_cd OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO lookup.locale_cd (locale_cd, code, start_time, end_time, row_created_by, row_updated_by, row_created_on, row_updated_on, row_update_info) VALUES (E'1', E'en_IN', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.locale_cd (locale_cd, code, start_time, end_time, row_created_by, row_updated_by, row_created_on, row_updated_on, row_update_info) VALUES (E'2', E'ta_IN', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\n\n-- object: contact_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE lookup.contact_locale DROP CONSTRAINT IF EXISTS contact_cd_fk CASCADE;\nALTER TABLE lookup.contact_locale ADD CONSTRAINT contact_cd_fk FOREIGN KEY (contact_cd)\nREFERENCES lookup.contact_cd (contact_cd) MATCH FULL\nON DELETE RESTRICT ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: locale_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE lookup.contact_locale DROP CONSTRAINT IF EXISTS locale_cd_fk CASCADE;\nALTER TABLE lookup.contact_locale ADD CONSTRAINT locale_cd_fk FOREIGN KEY (locale_cd)\nREFERENCES lookup.locale_cd (locale_cd) MATCH FULL\nON DELETE RESTRICT ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: contact_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE public.contact DROP CONSTRAINT IF EXISTS contact_cd_fk CASCADE;\nALTER TABLE public.contact ADD CONSTRAINT contact_cd_fk FOREIGN KEY (contact_cd)\nREFERENCES lookup.contact_cd (contact_cd) MATCH FULL\nON DELETE RESTRICT ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: public.password_password_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.password_password_id_seq CASCADE;\nCREATE SEQUENCE public.password_password_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: public.password | type: TABLE --\n-- DROP TABLE IF EXISTS public.password CASCADE;\nCREATE TABLE public.password (\npassword_id bigint NOT NULL DEFAULT nextval('public.password_password_id_seq'::regclass),\nlogin_user_id bigint NOT NULL,\nsecret_key varchar(300) NOT NULL,\nforce_password_change boolean NOT NULL DEFAULT false,\nrow_created_on timestamptz NOT NULL DEFAULT current_timestamp,\nCONSTRAINT password_pk PRIMARY KEY (password_id)\n);\n-- ddl-end --\nALTER TABLE public.password OWNER TO postgres;\n-- ddl-end --\n\n-- object: public.login_history | type: TABLE --\n-- DROP TABLE IF EXISTS public.login_history CASCADE;\nCREATE TABLE public.login_history (\nlogin_history_id bigserial NOT NULL,\nlogin_user_id bigint NOT NULL,\nsuccess_login boolean NOT NULL,\nrow_created_on timestamptz NOT NULL DEFAULT current_timestamp,\nlogout_time timestamptz\n\n);\n-- ddl-end --\nCOMMENT ON TABLE public.login_history IS E'Limit Login Attempt.\\n1. Record login failure in `login_history`\\n2. Check wheather,  more than `n` number of continous login attempt failed in `UserDetailsServiceImpl`, then throw locked exception.\\n3. Two way to unlock.\\n3(a). UnLock the login after/next `n` hours\\n3(b). Unlock using OTP';\n-- ddl-end --\nCOMMENT ON COLUMN public.login_history.success_login IS E'The login is success';\n-- ddl-end --\nCOMMENT ON COLUMN public.login_history.row_created_on IS E'login time';\n-- ddl-end --\nALTER TABLE public.login_history OWNER TO postgres;\n-- ddl-end --\n\n-- object: login_user_fk | type: CONSTRAINT --\n-- ALTER TABLE public.password DROP CONSTRAINT IF EXISTS login_user_fk CASCADE;\nALTER TABLE public.password ADD CONSTRAINT login_user_fk FOREIGN KEY (login_user_id)\nREFERENCES public.login_user (login_user_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: login_user_fk | type: CONSTRAINT --\n-- ALTER TABLE public.contact DROP CONSTRAINT IF EXISTS login_user_fk CASCADE;\nALTER TABLE public.contact ADD CONSTRAINT login_user_fk FOREIGN KEY (login_user_id)\nREFERENCES public.login_user (login_user_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: btree_gist | type: EXTENSION --\n-- DROP EXTENSION IF EXISTS btree_gist CASCADE;\nCREATE EXTENSION btree_gist\nWITH SCHEMA public;\n-- ddl-end --\n\n-- object: login_user_fk | type: CONSTRAINT --\n-- ALTER TABLE public.login_history DROP CONSTRAINT IF EXISTS login_user_fk CASCADE;\nALTER TABLE public.login_history ADD CONSTRAINT login_user_fk FOREIGN KEY (login_user_id)\nREFERENCES public.login_user (login_user_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: login_user_fk | type: CONSTRAINT --\n-- ALTER TABLE public.login_user_name DROP CONSTRAINT IF EXISTS login_user_fk CASCADE;\nALTER TABLE public.login_user_name ADD CONSTRAINT login_user_fk FOREIGN KEY (login_user_id)\nREFERENCES public.login_user (login_user_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: public.token_token_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.token_token_id_seq CASCADE;\nCREATE SEQUENCE public.token_token_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: public.token | type: TABLE --\n-- DROP TABLE IF EXISTS public.token CASCADE;\nCREATE TABLE public.token (\ntoken_id bigint NOT NULL DEFAULT nextval('public.token_token_id_seq'::regclass),\ncontact_id bigint NOT NULL,\notp varchar(200) NOT NULL,\nexpires_on timestamptz NOT NULL,\nrow_created_on timestamptz NOT NULL DEFAULT current_timestamp,\nCONSTRAINT token_pk PRIMARY KEY (token_id)\n);\n-- ddl-end --\nALTER TABLE public.token OWNER TO postgres;\n-- ddl-end --\n\n-- object: contact_fk | type: CONSTRAINT --\n-- ALTER TABLE public.token DROP CONSTRAINT IF EXISTS contact_fk CASCADE;\nALTER TABLE public.token ADD CONSTRAINT contact_fk FOREIGN KEY (contact_id)\nREFERENCES public.contact (contact_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: ixfk_token_contact_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_token_contact_id CASCADE;\nCREATE INDEX ixfk_token_contact_id ON public.token\nUSING btree\n(\ncontact_id DESC NULLS LAST\n);\n-- ddl-end --\n\n-- object: ixfk_contact_login_user_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_contact_login_user_id CASCADE;\nCREATE INDEX ixfk_contact_login_user_id ON public.contact\nUSING btree\n(\nlogin_user_id DESC NULLS LAST\n);\n-- ddl-end --\n\n-- object: ixfk_login_user_name_login_user_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_login_user_name_login_user_id CASCADE;\nCREATE INDEX ixfk_login_user_name_login_user_id ON public.login_user_name\nUSING btree\n(\nlogin_user_id DESC NULLS LAST\n);\n-- ddl-end --\n\n-- object: ixfk_password_login_user_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_password_login_user_id CASCADE;\nCREATE INDEX ixfk_password_login_user_id ON public.password\nUSING btree\n(\nlogin_user_id DESC NULLS LAST\n);\n-- ddl-end --\n\n-- object: ix_login_user_login_uuid | type: INDEX --\n-- DROP INDEX IF EXISTS public.ix_login_user_login_uuid CASCADE;\nCREATE INDEX ix_login_user_login_uuid ON public.login_user\nUSING btree\n(\nlogin_uuid\n);\n-- ddl-end --\n\n-- object: public.mfa_mfa_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.mfa_mfa_id_seq CASCADE;\nCREATE SEQUENCE public.mfa_mfa_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: public.mfa | type: TABLE --\n-- DROP TABLE IF EXISTS public.mfa CASCADE;\nCREATE TABLE public.mfa (\nmfa_id bigint NOT NULL DEFAULT nextval('public.mfa_mfa_id_seq'::regclass),\nlogin_user_id bigint NOT NULL,\ncontact_cd smallint NOT NULL,\nstart_time timestamptz,\nend_time timestamptz NOT NULL DEFAULT 'infinity'::timestamp,\nrow_created_on timestamp NOT NULL DEFAULT current_timestamp,\nrow_updated_on timestamptz NOT NULL,\nrow_update_info text\n\n);\n-- ddl-end --\nCOMMENT ON TABLE public.mfa IS E'Multi-Factor Authentication (MFA)';\n-- ddl-end --\nALTER TABLE public.mfa OWNER TO postgres;\n-- ddl-end --\n\n-- object: contact_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE public.mfa DROP CONSTRAINT IF EXISTS contact_cd_fk CASCADE;\nALTER TABLE public.mfa ADD CONSTRAINT contact_cd_fk FOREIGN KEY (contact_cd)\nREFERENCES lookup.contact_cd (contact_cd) MATCH FULL\nON DELETE RESTRICT ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: login_user_fk | type: CONSTRAINT --\n-- ALTER TABLE public.mfa DROP CONSTRAINT IF EXISTS login_user_fk CASCADE;\nALTER TABLE public.mfa ADD CONSTRAINT login_user_fk FOREIGN KEY (login_user_id)\nREFERENCES public.login_user (login_user_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: ixfk_mfa_login_user_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_mfa_login_user_id CASCADE;\nCREATE INDEX ixfk_mfa_login_user_id ON public.mfa\nUSING btree\n(\nlogin_user_id\n);\n-- ddl-end --\n\n-- object: ixfk_mfa_contact_cd | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_mfa_contact_cd CASCADE;\nCREATE INDEX ixfk_mfa_contact_cd ON public.mfa\nUSING btree\n(\ncontact_cd\n);\n-- ddl-end --\n\n-- object: ix_contact_end_time | type: INDEX --\n-- DROP INDEX IF EXISTS public.ix_contact_end_time CASCADE;\nCREATE INDEX ix_contact_end_time ON public.contact\nUSING btree\n(\n(end_time = 'infinity')\n);\n-- ddl-end --\n\n-- object: lookup.role_cd | type: TABLE --\n-- DROP TABLE IF EXISTS lookup.role_cd CASCADE;\nCREATE TABLE lookup.role_cd (\nrole_cd smallint NOT NULL,\ncode varchar(50) NOT NULL,\nstart_time timestamp NOT NULL DEFAULT current_timestamp,\nend_time timestamp NOT NULL DEFAULT 'infinity'::timestamp,\nrow_created_on timestamptz DEFAULT current_timestamp,\nrow_created_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_updated_on timestamptz NOT NULL DEFAULT current_timestamp,\nrow_updated_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_update_info text,\nCONSTRAINT role_cd_pk PRIMARY KEY (role_cd)\n);\n-- ddl-end --\nALTER TABLE lookup.role_cd OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO lookup.role_cd (role_cd, code, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'1', E'USER', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.role_cd (role_cd, code, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'2', E'SUPPORT', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.role_cd (role_cd, code, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'3', E'ADMIN', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\n\n-- object: lookup.role_locale | type: TABLE --\n-- DROP TABLE IF EXISTS lookup.role_locale CASCADE;\nCREATE TABLE lookup.role_locale (\nrole_cd smallint NOT NULL,\nlocale_cd integer NOT NULL,\ndescription varchar NOT NULL DEFAULT 100,\nstart_time timestamp NOT NULL DEFAULT current_timestamp,\nend_time timestamptz NOT NULL DEFAULT 'infinity'::timestamp,\nrow_created_on timestamp NOT NULL DEFAULT current_timestamp,\nrow_created_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_updated_on timestamp NOT NULL DEFAULT current_timestamp,\nrow_updated_by varchar(50) NOT NULL DEFAULT 'Thirumal',\nrow_update_info text\n\n);\n-- ddl-end --\nALTER TABLE lookup.role_locale OWNER TO postgres;\n-- ddl-end --\n\nINSERT INTO lookup.role_locale (role_cd, locale_cd, description, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'1', E'1', E'USER', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.role_locale (role_cd, locale_cd, description, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'2', E'1', E'SUPPORT', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\nINSERT INTO lookup.role_locale (role_cd, locale_cd, description, start_time, end_time, row_created_on, row_created_by, row_updated_on, row_updated_by, row_update_info) VALUES (E'3', E'1', E'ADMIN', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT);\n-- ddl-end --\n\n-- object: role_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE lookup.role_locale DROP CONSTRAINT IF EXISTS role_cd_fk CASCADE;\nALTER TABLE lookup.role_locale ADD CONSTRAINT role_cd_fk FOREIGN KEY (role_cd)\nREFERENCES lookup.role_cd (role_cd) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: locale_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE lookup.role_locale DROP CONSTRAINT IF EXISTS locale_cd_fk CASCADE;\nALTER TABLE lookup.role_locale ADD CONSTRAINT locale_cd_fk FOREIGN KEY (locale_cd)\nREFERENCES lookup.locale_cd (locale_cd) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: ixfk_role_locale_role_cd | type: INDEX --\n-- DROP INDEX IF EXISTS lookup.ixfk_role_locale_role_cd CASCADE;\nCREATE INDEX ixfk_role_locale_role_cd ON lookup.role_locale\nUSING btree\n(\nrole_cd\n);\n-- ddl-end --\n\n-- object: ixfk_role_locale_locale_cd | type: INDEX --\n-- DROP INDEX IF EXISTS lookup.ixfk_role_locale_locale_cd CASCADE;\nCREATE INDEX ixfk_role_locale_locale_cd ON lookup.role_locale\nUSING btree\n(\nlocale_cd\n);\n-- ddl-end --\n\n-- object: ix_role_cd_code | type: INDEX --\n-- DROP INDEX IF EXISTS lookup.ix_role_cd_code CASCADE;\nCREATE INDEX ix_role_cd_code ON lookup.role_cd\nUSING btree\n(\ncode\n);\n-- ddl-end --\n\n-- object: public.login_user_role_login_user_role_id_seq | type: SEQUENCE --\n-- DROP SEQUENCE IF EXISTS public.login_user_role_login_user_role_id_seq CASCADE;\nCREATE SEQUENCE public.login_user_role_login_user_role_id_seq\nINCREMENT BY 1\nMINVALUE -9223372036854775808\nMAXVALUE 9223372036854775807\nSTART WITH 1\nCACHE 1\nNO CYCLE\nOWNED BY NONE;\n\n-- ddl-end --\n\n-- object: public.login_user_role | type: TABLE --\n-- DROP TABLE IF EXISTS public.login_user_role CASCADE;\nCREATE TABLE public.login_user_role (\nlogin_user_role_id bigint NOT NULL DEFAULT nextval('public.login_user_role_login_user_role_id_seq'::regclass),\nlogin_user_id bigint NOT NULL,\nrole_cd smallint NOT NULL,\nstart_time timestamp NOT NULL DEFAULT current_timestamp,\nend_time timestamptz NOT NULL DEFAULT 'infinity'::timestamp,\nremarks varchar(100),\nCONSTRAINT login_user_role_pk PRIMARY KEY (login_user_role_id)\n);\n-- ddl-end --\nALTER TABLE public.login_user_role OWNER TO postgres;\n-- ddl-end --\n\n-- object: role_cd_fk | type: CONSTRAINT --\n-- ALTER TABLE public.login_user_role DROP CONSTRAINT IF EXISTS role_cd_fk CASCADE;\nALTER TABLE public.login_user_role ADD CONSTRAINT role_cd_fk FOREIGN KEY (role_cd)\nREFERENCES lookup.role_cd (role_cd) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: ix_role_cd_end_time | type: INDEX --\n-- DROP INDEX IF EXISTS lookup.ix_role_cd_end_time CASCADE;\nCREATE INDEX ix_role_cd_end_time ON lookup.role_cd\nUSING btree\n(\n(end_time='infinity')\n);\n-- ddl-end --\n\n-- object: login_user_fk | type: CONSTRAINT --\n-- ALTER TABLE public.login_user_role DROP CONSTRAINT IF EXISTS login_user_fk CASCADE;\nALTER TABLE public.login_user_role ADD CONSTRAINT login_user_fk FOREIGN KEY (login_user_id)\nREFERENCES public.login_user (login_user_id) MATCH FULL\nON DELETE CASCADE ON UPDATE CASCADE;\n-- ddl-end --\n\n-- object: ix_login_user_role_end_time | type: INDEX --\n-- DROP INDEX IF EXISTS public.ix_login_user_role_end_time CASCADE;\nCREATE INDEX ix_login_user_role_end_time ON public.login_user_role\nUSING btree\n(\n(end_time='infinity')\n);\n-- ddl-end --\n\n-- object: ixfk_login_user_role_role_cd | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_login_user_role_role_cd CASCADE;\nCREATE INDEX ixfk_login_user_role_role_cd ON public.login_user_role\nUSING btree\n(\nrole_cd\n);\n-- ddl-end --\n\n-- object: ixfk_login_user_role_login_user_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ixfk_login_user_role_login_user_id CASCADE;\nCREATE INDEX ixfk_login_user_role_login_user_id ON public.login_user_role\nUSING btree\n(\nlogin_user_id\n);\n-- ddl-end --\n\n-- object: public.spring_session | type: TABLE --\n-- DROP TABLE IF EXISTS public.spring_session CASCADE;\nCREATE TABLE public.spring_session (\nprimary_id char(36) NOT NULL,\nsession_id char(36) NOT NULL,\ncreation_time bigint NOT NULL,\nlast_access_time bigint NOT NULL,\nmax_inactive_interval integer NOT NULL,\nexpiry_time bigint NOT NULL,\nprincipal_name varchar(100),\nCONSTRAINT spring_session_session_id_unique UNIQUE (session_id),\nCONSTRAINT spring_session_pk PRIMARY KEY (primary_id)\n);\n-- ddl-end --\nALTER TABLE public.spring_session OWNER TO postgres;\n-- ddl-end --\n\n-- object: ix_spring_session_session_id | type: INDEX --\n-- DROP INDEX IF EXISTS public.ix_spring_session_session_id CASCADE;\nCREATE UNIQUE INDEX ix_spring_session_session_id ON public.spring_session\nUSING btree\n(\nsession_id\n);\n-- ddl-end --\n\n-- object: ix_spring_session_expiry_time | type: INDEX --\n-- DROP INDEX IF EXISTS public.ix_spring_session_expiry_time CASCADE;\nCREATE INDEX ix_spring_session_expiry_time ON public.spring_session\nUSING btree\n(\nexpiry_time\n);\n-- ddl-end --\n\n-- object: ix_spring_session_principal_name | type: INDEX --\n-- DROP INDEX IF EXISTS public.ix_spring_session_principal_name CASCADE;\nCREATE INDEX ix_spring_session_principal_name ON public.spring_session\nUSING btree\n(\nprincipal_name\n);\n-- ddl-end --\n\n-- object: public.spring_session_attributes | type: TABLE --\n-- DROP TABLE IF EXISTS public.spring_session_attributes CASCADE;\nCREATE TABLE public.spring_session_attributes (\nsession_primary_id char(36) NOT NULL,\nattribute_name varchar(200) NOT NULL,\nattribute_bytes bytea NOT NULL,\nCONSTRAINT spring_session_attributes_pk PRIMARY KEY (session_primary_id,attribute_name)\n);\n-- ddl-end --\nALTER TABLE public.spring_session_attributes OWNER TO postgres;\n-- ddl-end --\n\n-- object: spring_session_attributes_fk | type: CONSTRAINT --\n-- ALTER TABLE public.spring_session_attributes DROP CONSTRAINT IF EXISTS spring_session_attributes_fk CASCADE;\nALTER TABLE public.spring_session_attributes ADD CONSTRAINT spring_session_attributes_fk FOREIGN KEY (session_primary_id)\nREFERENCES public.spring_session (primary_id) MATCH SIMPLE\nON DELETE CASCADE ON UPDATE NO ACTION;\n-- ddl-end --\n</code></pre>"},{"location":"jwks/","title":"JWKS","text":"<pre><code>curl --location 'http://localhost:9000/oauth2/jwks' \\\n--header 'Authorization: Bearer eyJraWQiOiI1NzIzMTllYS1jNWFmLTRkM2EtYmIwNy03MjhhOGM0NTFiNmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI3MWVmNTViZS1hODNiLTQ1M2MtYmNkYS1mZWViYzg2M2JlNTUiLCJhdWQiOiIxIiwibmJmIjoxNjc5NzY0NDkwLCJzY29wZSI6WyJyZWFkIl0sInJvbGVzIjpbIlVTRVIiXSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5MDAwIiwiQ3JlYXRvciI6IlRoaXJ1bWFsIiwiZXhwIjoxNjc5NzY3NDkwLCJpYXQiOjE2Nzk3NjQ0OTB9.1W1ZuuCPy46ZVvQWEoVVKHQs4hdO_-1PyUe16fQk3KJeJs8Zu3KlFlKkr7AzpJR11_TuZ14atLexeKI7cZFA_dfBjP_pQq4j0RC7S8rXGaetXTjG--PykV2x4TMnj_bvJkp_6ZVMGbKkXT6CbysqzLRbY8e6ZZVkDhMKAa4avswdB4MgPq0DHqqjh21Gre8_1pm7Op25PGySGP1xfHnGXgY1fdBFCjGcHL8TJyQgrEl11qZo4CrvrDeevmCPLfMwYUla2GJIocWO9oCTAyVgmU4H2jMaCWyRrtOWuhP9683NTefPuprm73_blqWKvcEgULxijT_6HVQKJwPzSgYFPg'\n</code></pre>"}]}